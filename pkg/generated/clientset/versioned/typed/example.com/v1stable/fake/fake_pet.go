/*
Copyright Arvin
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1stable "github.com/Arvintian/demo-k8s-crd/pkg/apis/example.com/v1stable"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePets implements PetInterface
type FakePets struct {
	Fake *FakeExampleV1stable
	ns   string
}

var petsResource = schema.GroupVersionResource{Group: "example.com", Version: "v1stable", Resource: "pets"}

var petsKind = schema.GroupVersionKind{Group: "example.com", Version: "v1stable", Kind: "Pet"}

// Get takes name of the pet, and returns the corresponding pet object, and an error if there is any.
func (c *FakePets) Get(name string, options v1.GetOptions) (result *v1stable.Pet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(petsResource, c.ns, name), &v1stable.Pet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1stable.Pet), err
}

// List takes label and field selectors, and returns the list of Pets that match those selectors.
func (c *FakePets) List(opts v1.ListOptions) (result *v1stable.PetList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(petsResource, petsKind, c.ns, opts), &v1stable.PetList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1stable.PetList{ListMeta: obj.(*v1stable.PetList).ListMeta}
	for _, item := range obj.(*v1stable.PetList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested pets.
func (c *FakePets) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(petsResource, c.ns, opts))

}

// Create takes the representation of a pet and creates it.  Returns the server's representation of the pet, and an error, if there is any.
func (c *FakePets) Create(pet *v1stable.Pet) (result *v1stable.Pet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(petsResource, c.ns, pet), &v1stable.Pet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1stable.Pet), err
}

// Update takes the representation of a pet and updates it. Returns the server's representation of the pet, and an error, if there is any.
func (c *FakePets) Update(pet *v1stable.Pet) (result *v1stable.Pet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(petsResource, c.ns, pet), &v1stable.Pet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1stable.Pet), err
}

// Delete takes name of the pet and deletes it. Returns an error if one occurs.
func (c *FakePets) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(petsResource, c.ns, name), &v1stable.Pet{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePets) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(petsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1stable.PetList{})
	return err
}

// Patch applies the patch and returns the patched pet.
func (c *FakePets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1stable.Pet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(petsResource, c.ns, name, pt, data, subresources...), &v1stable.Pet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1stable.Pet), err
}
