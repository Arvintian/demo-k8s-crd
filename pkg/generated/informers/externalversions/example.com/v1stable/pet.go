/*
Copyright Arvin
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1stable

import (
	time "time"

	examplecomv1stable "github.com/Arvintian/demo-k8s-crd/pkg/apis/example.com/v1stable"
	versioned "github.com/Arvintian/demo-k8s-crd/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/Arvintian/demo-k8s-crd/pkg/generated/informers/externalversions/internalinterfaces"
	v1stable "github.com/Arvintian/demo-k8s-crd/pkg/generated/listers/example.com/v1stable"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// PetInformer provides access to a shared informer and lister for
// Pets.
type PetInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1stable.PetLister
}

type petInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewPetInformer constructs a new informer for Pet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPetInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredPetInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredPetInformer constructs a new informer for Pet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPetInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ExampleV1stable().Pets(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ExampleV1stable().Pets(namespace).Watch(options)
			},
		},
		&examplecomv1stable.Pet{},
		resyncPeriod,
		indexers,
	)
}

func (f *petInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredPetInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *petInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&examplecomv1stable.Pet{}, f.defaultInformer)
}

func (f *petInformer) Lister() v1stable.PetLister {
	return v1stable.NewPetLister(f.Informer().GetIndexer())
}
